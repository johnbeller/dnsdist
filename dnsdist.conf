newServer("x.x.x.x")	-- homedns one
newServer("x.x.x.x")	-- homedns2 two
hostname = "dnsdist.example.net"

fullchain = '/etc/letsencrypt/live/' .. hostname .. '/fullchain.pem'
privkey = '/etc/letsencrypt/live/' .. hostname .. '/privkey.pem'

addTLSLocal('0.0.0.0:853', fullchain, privkey )

-- DNS-OVER-HTTPS: listening at port 53443
addDOHLocal('0.0.0.0:53443', fullchain, privkey )

setLocal("0.0.0.0")		-- Listen on any ip address, port 53/udp
addACL("0.0.0.0/0")		-- Anyone can connect, access limited by firewall

-- This is the webserver status page, proxied via caddy
webserver("127.0.0.1:8083")
setWebserverConfig({password="..."})

-- This is a hard-coded rule as test
-- addAction(RegexRule("(^|\\.)youtube\\.[a-z]{2,5}((\\.[a-z]{0,2})?)$"), RCodeAction(DNSRCode.NXDOMAIN))

function pass()
	return DNSAction.None, ""      -- no action
end

function block()
	-- return DNSAction.Spoof, "1.1.1.1"
	return DNSAction.Nxdomain, ""
end

-- This is our blocklist
blocklist = { "roblox", "youtube", "roblox", "discord", "minecraft", "tiktok", "snapchat", "bytedance", "googlevideo", "friv", "baidu", "imgflip", "meme" }

local iplookup = {
	["a.b.c.d"] = "client_name",
}

local socket = require("socket")
udp = socket.udp()
udp:setpeername("127.0.0.1", 53474)
udp:settimeout(10)

function status()
	udp:send("?")
	data = udp:receive()
	return data=="0"
end

-- This is our rule
function luarule(dq)
	disabled = status()

	-- Collect some data about the request and print it to syslog
	qname = dq.qname:toString()
	-- qcontent = dq:getContent()		-- only available from 1.8, we're still on 1.7
	qproto = dq:getProtocol()		-- protocol, port 53 or DOH etc
	qclient = dq.remoteaddr:toString()
	qclientname = iplookup[qclient]
	if qclientname == nil then
		qclientname = ""
	end

	infolog("[" .. (disabled and "FWOFF" or "FWON") .. "] Request from " .. qclient .. " (" .. qclientname .. ") via " .. qproto .. " to resolve " .. qname .. "")

	if disabled then 
		return pass() 
	end

	time = os.date("*t")
	-- infolog("time.wday == " .. time.wday .. " and time.hour == " .. time.hour )
	-- sunday == 1

	-- BEGIN_RULES

	-- Rules are simple now: between 6pm and 8pm every day: pass, otherwise block
	-- On Friday evening, allow again after 8pm, in the meantime we have dinner together

	afternoon = (time.hour == 18 or time.hour == 19)
	friday_evening = (time.wday == 6 and time.hour >= 20 and time.hour < 22)

	if afternoon then
		infolog(">Allowing request< to " .. qname .. ", reason: afternoon")
		return pass()
	end

	if friday_evening then
		infolog(">Allowing request< to " .. qname .. ", reason: friday_evening")
		return pass()
	end

	-- END_RULES

	-- if we are in a time slot that requires checking, do so now
	for _,b in ipairs(blocklist) do
		if(string.find(qname,b)) 
		then
			infolog("*Blocked request* to " .. qname)
			return block()
		end
	end

	-- if we end up here, we are in a time slot but the dns request is legitimate
	return pass()
end

addAction(AllRule(), LuaAction(luarule))
